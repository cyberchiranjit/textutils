{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","style","backgroundColor","color","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0439cc95.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n// import { Link } from \"react-router-dom\";\n\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"#\">\n          {props.title}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"/navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\n                Home\n              </a>\n            </li>\n            {/* <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/about\">\n                {props.aboutText}\n              </a>\n            </li> */}\n          </ul>\n\n          {/* <form className=\"d-flex\">\n            <input\n              className=\"form-control me-2\"\n              type=\"search\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n            />\n            <button className=\"btn btn-primary\" type=\"submit\">\n              Search\n            </button>\n          </form> */}\n\n          <div className={`form-check form-switch text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\n            <input\n              onClick={props.toggleMode}\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              id=\"flexSwitchCheckDefault\"\n            />\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\n              Enable Dark Mode\n            </label>\n          </div>\n          \n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired,\n  aboutText: PropTypes.string.isRequired,\n};\n\nNavbar.defaultProps = {\n  title: \"Set title here\",\n  aboutText: \"About\",\n};\n","import React, {useState} from 'react'\n\n\nexport default function TextForm(props) {\n\n    const handleUpClick = () =>{\n        let newText = text.toUpperCase();\n        setText(newText)\n        props.showAlert(\"Converted to uppercase!\", \"success\")\n    }\n\n        const handleLowClick = () =>{\n        let newText = text.toLowerCase();\n        setText(newText)\n        props.showAlert(\"Converted to lowercase!\", \"success\")\n    }\n  \n        const handleCopy = () =>{\n        var text = document.getElementById(\"myBox\");\n        text.select();\n        navigator.clipboard.writeText(text.value)\n        props.showAlert(\"Copied to Clipboard!\", \"success\")\n    }\n  \n        const handleClearClick = () =>{\n        let newText = \"\";\n        setText(newText)\n        props.showAlert(\"Text Cleared!\", \"success\")\n    }\n    \n    const handleOnChange = (event) =>{\n        setText(event.target.value);\n    }\n\n    const [text, setText] = useState('');\n    // setText(\"New text\");\n    return (\n        <>\n        <div className=\"container\">\n            <h1>{props.heading}</h1>\n            <div className=\"mb-3\">\n                <textarea style={{backgroundColor: props.mode===\"light\"?\"white\":\"black\", color: props.mode===\"light\"?\"black\":\"white\"}} className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\n            </div>\n                <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to Uppercase</button>\n                <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert to Lowercase</button>\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\n                <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\n        </div>\n        <div className=\"container my-4\">\n            <h1>Your text summary</h1>\n            <p>{text.split(\" \").length} words and {text.length} characters </p>\n            <p>{0.008 * text.split(\" \").length} Minutes read</p>\n            <h2>Preview</h2>\n            <p>{text.length>0?text:\"Enter something to preview it\"}</p>\n        </div>\n        </>\n    )\n}\n","import React from \"react\";\n\nfunction Alert(props) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\n    }\n\n  return (\n      props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n      </div>\n  );\n}\n\nexport default Alert;\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport React, { useState } from \"react\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // Wheather dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"black\";\n      document.body.style.color = \"white\";\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      showAlert(\"Light Mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\"/> */}\n      {/* <Navbar/> */}\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Switch> */}\n            {/* <Route exact path=\"/about\">\n              <About />\n            </Route> */}\n            {/* <Route exact path=\"/\"> */}\n              <TextForm\n                showAlert={showAlert}\n                heading=\"Enter the text to analyze below\"\n                mode={mode}\n              />\n            {/* </Route> */}\n          {/* </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}